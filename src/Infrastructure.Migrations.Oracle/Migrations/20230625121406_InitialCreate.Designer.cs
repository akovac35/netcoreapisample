// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace Infrastructure.Migrations.Oracle.Migrations
{
    [DbContext(typeof(SampleDbContext))]
    [Migration("20230625121406_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.AuthorRelated.AuthorDbo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("NUMBER(10)");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("RAW(16)");

                    b.HasKey("Id");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("Authors", (string)null);

                    b.HasAnnotation("SqlServer:IsTemporal", true);
                });

            modelBuilder.Entity("Domain.BookRelated.BookDbo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("NUMBER(19)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int?>("DbComputedColumn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("NUMBER(10)")
                        .HasComputedColumnSql("\"RowVersion\" + 1");

                    b.Property<DateTime?>("DbDefaultValueColumn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP(7)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("RAW(16)");

                    b.Property<int>("Year")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("Books", (string)null);

                    b.HasAnnotation("SqlServer:IsTemporal", true);
                });

            modelBuilder.Entity("Domain.ConsentRelated.ConsentDbo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("ModifiedAtUtc")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("NUMBER(1)");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("NUMBER(10)");

                    b.Property<Guid>("UniqueId")
                        .HasColumnType("RAW(16)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTimeOffset>("ValidFromUtc")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<DateTimeOffset>("ValidThroughUtc")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.HasKey("Id");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.ToTable("Consents", (string)null);

                    b.HasAnnotation("SqlServer:IsTemporal", true);
                });

            modelBuilder.Entity("Domain.BookRelated.BookDbo", b =>
                {
                    b.HasOne("Domain.AuthorRelated.AuthorDbo", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
